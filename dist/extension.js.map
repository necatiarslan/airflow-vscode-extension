{"version":3,"file":"extension.js","mappings":"8GAAA,eAEA,oBAECA,YAAYC,GAEX,MAAMC,EAAOC,EAAOC,OAAOC,eAAe,cAAe,CAAEC,iBAqBrD,CACNC,YAAcC,GAehB,SAAqBC,GACpB,IAAKA,EACJ,OAAOC,OAAOC,KAAKC,GAEpB,MAAMC,EAAcC,EAAeL,GACnC,OAAII,EACIH,OAAOC,KAAKE,GAEb,EACR,CAvBUN,CAAYC,EAAUA,EAAQC,SAAMM,GAAWC,KAAIP,GA+C7D,SAAiBA,GAIhB,OAHKQ,EAAMR,KACVQ,EAAMR,GAAO,IAAIS,EAAIT,IAEfQ,EAAMR,EACd,CApDoEU,CAAQV,KAE1EW,YAAcZ,IACb,MAAMa,EAsBT,SAAqBZ,GACpB,MAAMI,EAAcC,EAAeL,GAE7Ba,EAAU,IAAInB,EAAOoB,eAAe,sBAAsBd,KAAO,GACvE,MAAO,CACNe,MAAsC,CAAEA,MAAOf,EAAKgB,WAAYhB,EAAIiB,OAAS,EAAI,CAAC,CAACjB,EAAIiB,OAAS,EAAGjB,EAAIiB,OAAS,SAAM,GACtHJ,UACAK,iBAAkBd,GAAeH,OAAOC,KAAKE,GAAaa,OAASvB,EAAOyB,yBAAyBC,UAAY1B,EAAOyB,yBAAyBE,KAEjJ,CA/BoBV,CAAYZ,EAAQC,KAErC,OADAY,EAASU,GAAKvB,EAAQC,IACfY,CAAQ,EAEhBW,UAAW,EAAGvB,UACb,MAAMwB,EAAYxB,EAAIyB,UAAU,EAAGzB,EAAIiB,OAAS,GAChD,OAAOO,EAAY,IAAIf,EAAIe,QAAa,CAAM,GAhC6DE,iBAAiB,IAE7HlC,EAAQmC,cAAcC,KAAKnC,EAC5B,GAID,MAAMU,EAAU,CACf,sBAAyB,CAAC,EAC1B,mCAAsC,CAAC,EACvC,+BAAiC,CAAC,EAClC,sBAAwB,CAAC,EACzB,yCAA2C,CAAC,EAC5C,gBAAkB,CAAC,EACnB,sBAAwB,CAAC,EACzB,mCAAqC,CAAC,GAGjCK,EAAQ,CAAC,EAyCf,SAASH,EAAeN,GACvB,IAAI8B,EAAS1B,EACb,IAAK,IAAI2B,EAAI,EAAGA,EAAI/B,EAAQkB,OAAQa,IAEnC,GADAD,EAASA,EAAO9B,EAAQ0B,UAAU,EAAGK,EAAI,KACpCD,EACJ,OAAO,KAGT,OAAOA,CACR,CASA,MAAMpB,EACLlB,YAAqBS,GAAA,KAAAA,IAAAA,CAAe,E,UCpFrC+B,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqB9B,IAAjB+B,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAM,EAAoBF,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,uGCpBA,eACA,SAIA,oBAAyBxC,GACxB+C,QAAQC,IAAI,uDAEZ9C,EAAO+C,SAASC,gBAAgB,6BAA6B,KAC5DhD,EAAOC,OAAOgD,uBAAuB,qCAAqC,IAG3EjD,EAAO+C,SAASC,gBAAgB,yBAAyB,KACxDhD,EAAOC,OAAOgD,uBAAuB,iCAAiC,IAGvEjD,EAAO+C,SAASC,gBAAgB,2BAA2B,KAC1DhD,EAAOC,OAAOgD,uBAAuB,mCAAmC,IAGzE,IAAI,EAAAC,YAAYpD,EACjB,EAGA,wBACC+C,QAAQC,IAAI,wDACb,C","sources":["webpack://airflow-vscode-extension/./src/airflowView.ts","webpack://airflow-vscode-extension/external commonjs \"vscode\"","webpack://airflow-vscode-extension/webpack/bootstrap","webpack://airflow-vscode-extension/./src/extension.ts"],"sourcesContent":["import * as vscode from 'vscode';\n\nexport class AirflowView {\n\n\tconstructor(context: vscode.ExtensionContext) {\n\t\t\n\t\tconst view = vscode.window.createTreeView('airflowView', { treeDataProvider: aNodeWithIdTreeDataProvider(), showCollapseAll: true });\n\t\t\n\t\tcontext.subscriptions.push(view);\n\t}\n}\n\n// http://localhost:8080/api/v1/dags \nconst dagTree = {\n\t'example_bash_operator': {},\n\t'example_branch_datetime_operator_2': {},\n\t'example_branch_dop_operator_v3':{},\n\t'example_branch_labels':{},\n\t'example_branch_python_operator_decorator':{},\n\t'example_complex':{},\n\t'example_dag_decorator':{},\n\t'example_external_task_marker_child':{},\n};\n\nconst nodes = {};\n\nfunction aNodeWithIdTreeDataProvider(): vscode.TreeDataProvider<{ key: string }> {\n\treturn {\n\t\tgetChildren: (element: { key: string }): { key: string }[] => {\n\t\t\treturn getChildren(element ? element.key : undefined).map(key => getNode(key));\n\t\t},\n\t\tgetTreeItem: (element: { key: string }): vscode.TreeItem => {\n\t\t\tconst treeItem = getTreeItem(element.key);\n\t\t\ttreeItem.id = element.key;\n\t\t\treturn treeItem;\n\t\t},\n\t\tgetParent: ({ key }: { key: string }): { key: string } => {\n\t\t\tconst parentKey = key.substring(0, key.length - 1);\n\t\t\treturn parentKey ? new Key(parentKey) : void 0;\n\t\t}\n\t};\n}\n\nfunction getChildren(key: string): string[] {\n\tif (!key) {\n\t\treturn Object.keys(dagTree);\n\t}\n\tconst treeElement = getTreeElement(key);\n\tif (treeElement) {\n\t\treturn Object.keys(treeElement);\n\t}\n\treturn [];\n}\n\nfunction getTreeItem(key: string): vscode.TreeItem {\n\tconst treeElement = getTreeElement(key);\n\t// An example of how to use codicons in a MarkdownString in a tree item tooltip.\n\tconst tooltip = new vscode.MarkdownString(`$(zap) Tooltip for ${key}`, true);\n\treturn {\n\t\tlabel: /**vscode.TreeItemLabel**/<any>{ label: key, highlights: key.length > 1 ? [[key.length - 2, key.length - 1]] : void 0 },\n\t\ttooltip,\n\t\tcollapsibleState: treeElement && Object.keys(treeElement).length ? vscode.TreeItemCollapsibleState.Collapsed : vscode.TreeItemCollapsibleState.None\n\t};\n}\n\nfunction getTreeElement(element:string): any {\n\tlet parent = dagTree;\n\tfor (let i = 0; i < element.length; i++) {\n\t\tparent = parent[element.substring(0, i + 1)];\n\t\tif (!parent) {\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn parent;\n}\n\nfunction getNode(key: string): { key: string } {\n\tif (!nodes[key]) {\n\t\tnodes[key] = new Key(key);\n\t}\n\treturn nodes[key];\n}\n\nclass Key {\n\tconstructor(readonly key: string) { }\n}","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport { AirflowView } from './airflowView';\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\tconsole.log('Extension \"airflow-vscode-extension\" is now active!');\n\n\tvscode.commands.registerCommand('airflowView.refreshServer', () => {\n\t\tvscode.window.showInformationMessage('airflowView.refreshServer clicked!');\n\t});\n\n\tvscode.commands.registerCommand('airflowView.addServer', () => {\n\t\tvscode.window.showInformationMessage('airflowView.addServer clicked!');\n\t});\n\n\tvscode.commands.registerCommand('airflowView.viewDagView', () => {\n\t\tvscode.window.showInformationMessage('airflowView.viewDagView clicked!');\n\t});\n\n\tnew AirflowView(context);\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {\n\tconsole.log('Extension \"airflow-vscode-extension\" is now deactive!');\n}\n"],"names":["constructor","context","view","vscode","window","createTreeView","treeDataProvider","getChildren","element","key","Object","keys","dagTree","treeElement","getTreeElement","undefined","map","nodes","Key","getNode","getTreeItem","treeItem","tooltip","MarkdownString","label","highlights","length","collapsibleState","TreeItemCollapsibleState","Collapsed","None","id","getParent","parentKey","substring","showCollapseAll","subscriptions","push","parent","i","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","console","log","commands","registerCommand","showInformationMessage","AirflowView"],"sourceRoot":""}